name: cd

on:
  push:
    branches: [main]
  pull_request:
    branches:
      - main

jobs:

  docker-build-and-push:
    name: Build and push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:

      - name: Check out code
        uses: actions/checkout@v4

      - name: Check for difference between working directory and latest commit
        run: git diff HEAD

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker images to Amazon ECR
        id: docker-push
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: peso-repo
          IMAGE_TAG: latest
          # IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .

          cp nginx.conf nginx/

          docker build -t $REGISTRY/$REPOSITORY:nginx -f nginx/Dockerfile nginx/

          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:nginx

          echo "registry=$REGISTRY" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    outputs:
      ec2_ip: ${{ steps.get_ip.outputs.ec2_ip }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Get EC2 IP address
        id: get_ip
        run: |
          EC2_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=Peso" --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "ec2_ip=$EC2_IP" >> $GITHUB_OUTPUT

      - name: Setup SSH and Deploy
        env:
          REGISTRY: ${{ needs.docker-build-and-push.outputs.registry }}
          EC2_IP: ${{ steps.get_ip.outputs.ec2_ip }}
        run: |
          PASSWORD=$(aws ecr get-login-password --region sa-east-1)

          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

          cat > .env << EOF
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          DATABASE_USER=${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          PUBLIC_IP=${{ secrets.PUBLIC_IP }}
          AUTH_GOOGLE_ID=${{ secrets.AUTH_GOOGLE_ID }}
          AUTH_GOOGLE_SECRET=${{ secrets.AUTH_GOOGLE_SECRET }}
          AUTH_SECRET=${{ secrets.AUTH_SECRET }}
          AUTH_TRUST_HOST=${{ secrets.AUTH_TRUST_HOST }}
          EOF

          k3s kubectl create secret generic my-secret --from-env-file=.env --dry-run=client -o yaml > secret.yaml

          # Copy Kubernetes files and secrets to EC2
          scp -r k8s ubuntu@${{ secrets.EC2_HOST }}:~/
          scp .env ubuntu@${{ secrets.EC2_HOST }}:~/
          scp secret.yaml ubuntu@${{ secrets.EC2_HOST }}:~/

          # Remove sensitive files locally
          rm .env secret.yaml

          ssh ubuntu@${{ secrets.EC2_HOST }} << EOF
            set -e
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=sa-east-1
            export REGISTRY=${{ needs.docker-build-and-push.outputs.registry }}

            # Login to Amazon ECR from EC2
            aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin \${REGISTRY}

            sudo k3s kubectl apply -f ~/secret.yaml

            sudo k3s kubectl create secret generic db-secret \
              --from-literal=DATABASE_HOST='${{ secrets.DATABASE_HOST }}' \
              --from-literal=DATABASE_NAME='${{ secrets.DATABASE_NAME }}' \
              --from-literal=DATABASE_USER='${{ secrets.DATABASE_USER }}' \
              --from-literal=DATABASE_PASSWORD='${{ secrets.DATABASE_PASSWORD }}' \
              --from-literal=PUBLIC_IP='${{ secrets.PUBLIC_IP }}' \
              --from-literal=AUTH_GOOGLE_ID='${{ secrets.AUTH_GOOGLE_ID }}' \
              --from-literal=AUTH_GOOGLE_SECRET='${{ secrets.AUTH_GOOGLE_SECRET }}' \
              --from-literal=AUTH_SECRET='${{ secrets.AUTH_SECRET }}' \
              --from-literal=AUTH_TRUST_HOST='${{ secrets.AUTH_TRUST_HOST }}' \
              --dry-run=client -o yaml | sudo k3s kubectl apply -f -

            sudo k3s kubectl create secret docker-registry ecr-secret \\
              --docker-server=\${REGISTRY} \\
              --docker-username=AWS \\
              --docker-password=\$(aws ecr get-login-password --region sa-east-1) \\
              --dry-run=client -o yaml | sudo k3s kubectl apply -f -

            sudo k3s kubectl create secret generic my-secret --from-env-file=~/.env --dry-run=client -o yaml > ~/k8s/secret.yaml
            sudo k3s kubectl apply -f ~/k8s/secret.yaml

            export IMAGE=\${REGISTRY}/peso-repo:latest
            export NGINX_IMAGE=\${REGISTRY}/peso-repo:nginx

            cd ~/k8s
            envsubst < deployment.yaml | sudo k3s kubectl apply -f -
            sudo k3s kubectl apply -f service.yaml
            sudo k3s kubectl apply -f ingress.yaml

            rm -f ~/.env ~/secret.yaml

            sudo k3s kubectl get pods
            sudo k3s kubectl get svc
            sudo k3s kubectl get ingress
          EOF
