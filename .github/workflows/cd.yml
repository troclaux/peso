name: cd

on:
  push:
    branches:
      - main
      - docker-compose
  pull_request:
    branches:
      - main

jobs:

  docker-build-and-push:
    name: build and push docker images
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}

    steps:

      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: build, tag, and push next.js docker image
        id: docker-push-nextjs
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: peso-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:nextjs-$IMAGE_TAG -t $REGISTRY/$REPOSITORY:nextjs-latest .
          docker push $REGISTRY/$REPOSITORY:nextjs-$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:nextjs-latest

      - name: build, tag, and push nginx docker image
        id: docker-push-nginx
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: peso-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:nginx-$IMAGE_TAG -t $REGISTRY/$REPOSITORY:nginx-latest -f nginx/Dockerfile .
          docker push $REGISTRY/$REPOSITORY:nginx-$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:nginx-latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    outputs:
      ec2_ip: ${{ steps.get_ip.outputs.ec2_ip }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Get EC2 IP address
        id: get_ip
        run: |
          EC2_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=Peso" --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "ec2_ip=$EC2_IP" >> $GITHUB_OUTPUT

      - name: Setup SSH and Deploy
        env:
          REGISTRY: ${{ needs.docker-build-and-push.outputs.registry }}
          EC2_IP: ${{ steps.get_ip.outputs.ec2_ip }}
        run: |
          PASSWORD=$(aws ecr get-login-password --region sa-east-1)

          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

          scp -r k8s ubuntu@${{ secrets.EC2_HOST }}:~/

          ssh ubuntu@${{ secrets.EC2_HOST }} << EOF
            set -e
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=sa-east-1
            export REGISTRY=${{ needs.docker-build-and-push.outputs.registry }}

            aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin \${REGISTRY}

            aws secretsmanager get-secret-value --secret-id peso-env-secret --query SecretString --output text | jq -r 'to_entries | map("\(.key)=\(.value)") | .[]' > ~/.env

            sudo k3s kubectl create secret generic db-secret --from-env-file=~/.env --dry-run=client -o yaml | sudo k3s kubectl apply -f -

            sudo k3s kubectl create secret docker-registry ecr-secret \\
              --docker-server=\${REGISTRY} \\
              --docker-username=AWS \\
              --docker-password=\$(aws ecr get-login-password --region sa-east-1) \\
              --dry-run=client -o yaml | sudo k3s kubectl apply -f -

            sudo k3s kubectl create secret generic my-secret --from-env-file=~/.env --dry-run=client -o yaml > ~/k8s/secret.yaml
            sudo k3s kubectl apply -f ~/k8s/secret.yaml

            export REGISTRY=\${REGISTRY}

            cd ~/k8s
            envsubst < ec2-deployment.yaml | sudo k3s kubectl apply -f -

            rm -f ~/.env

            sudo k3s kubectl get pods
            sudo k3s kubectl get svc
            sudo k3s kubectl get ingress
          EOF
